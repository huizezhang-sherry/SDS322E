---
title: "Elements of Data Science <br> SDS 322E"
author: "H. Sherry Zhang <br> Department of Statistics and Data Sciences <br> The University of Texas at Austin"
format: 
  revealjs:
    scrollable: true
    slide-number: true
    show-slide-number: all
    aspectratio: 169
    #smaller: true
    theme: serif
    preview-links: auto
    pdf-separate-fragments: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE)
options(pillar.width = 80)
library(tidyverse)
library(gapminder)
library(nycflights13)
library(patchwork)
```

## R history and ecosystem

* 1976: S was initiated as an internal statistical analysis environment—originally implemented as Fortran libraries. S is a language that was developed by **John Chambers** and others at Bell Labs.


* 1991: Created in New Zealand by **Ross Ihaka** and **Robert Gentleman**. Their experience developing R is documented in a 1996 JCGS paper.

* 1997: The R Core Group is formed (containing some people associated with S-PLUS). The core group controls the source code for R. See more about the Foundation: <https://www.r-project.org/foundation/>

## Why R? 

R code:

```{r eval = FALSE}
library(tidyverse)
mtcars |>
  mutate(kpl = mpg * 0.425144) |>
  filter(vs == 0) |>
  group_by(cyl) |>
  summarize(
    disp = mean(disp, na.rm = TRUE),
    kpl = mean(kpl, na.rm = TRUE)) |> 
  arrange(disp)
```

How would the FORTRAN 90 code look like? 

## [FORTRAN 90 code for the same task]{.r-fit-text}

9 lines of code in R vs. 70 lines of code in FORTRAN 90

```{fortran eval = FALSE}
program mtcars_summary
    implicit none
    integer, parameter :: dp = selected_real_kind(15, 307)
    integer, parameter :: nmax = 100
    real(dp) :: mpg(nmax), disp(nmax), kpl(nmax)
    integer :: cyl(nmax), vs(nmax)
    integer :: i, n, j, ngrp, idx
    integer :: cyl_group(nmax)
    real(dp) :: disp_sum(nmax), kpl_sum(nmax)
    integer :: count(nmax)
    real(dp) :: disp_mean(nmax), kpl_mean(nmax)
    integer :: temp_i
    real(dp) :: temp_r
    ! open and read data
    open(unit=10, file='mtcars.csv', status='old', action='read')
    n = 0
    do
        read(10, *, end=100) mpg(n+1), cyl(n+1), disp(n+1), &
                              temp_r, temp_r, temp_r, temp_r, vs(n+1), &
                              temp_i, temp_i, temp_i
        n = n + 1
    end do
100 close(10)
    ! compute kpl
    do i = 1, n
        kpl(i) = mpg(i) * 0.425144_dp
    end do
    ! filter vs == 0
    ngrp = 0
    do i = 1, n
        if (vs(i) == 0) then
            ! check if cyl group already exists
            idx = 0
            do j = 1, ngrp
                if (cyl_group(j) == cyl(i)) idx = j
            end do
            if (idx == 0) then
                ngrp = ngrp + 1
                cyl_group(ngrp) = cyl(i)
                disp_sum(ngrp) = disp(i)
                kpl_sum(ngrp) = kpl(i)
                count(ngrp) = 1
            else
                disp_sum(idx) = disp_sum(idx) + disp(i)
                kpl_sum(idx)  = kpl_sum(idx) + kpl(i)
                count(idx)    = count(idx) + 1
            end if
        end if
    end do
    ! compute means
    do j = 1, ngrp
        disp_mean(j) = disp_sum(j) / count(j)
        kpl_mean(j)  = kpl_sum(j) / count(j)
    end do
    ! sort by disp_mean
    do i = 1, ngrp-1
        do j = i+1, ngrp
            if (disp_mean(j) < disp_mean(i)) then
                temp_r = disp_mean(i); disp_mean(i) = disp_mean(j); disp_mean(j) = temp_r
                temp_r = kpl_mean(i);  kpl_mean(i)  = kpl_mean(j);  kpl_mean(j)  = temp_r
                temp_i = cyl_group(i); cyl_group(i) = cyl_group(j); cyl_group(j) = temp_i
            end if
        end do
    end do
    ! print result
    print '(A4,2X,A10,2X,A10)', 'cyl', 'disp_mean', 'kpl_mean'
    do j = 1, ngrp
        print '(I4,2X,F10.3,2X,F10.3)', cyl_group(j), disp_mean(j), kpl_mean(j)
    end do
end program mtcars_summary

```

## R ecosystem

* **Base packages**: base, methods, datasets, utils, grDevices, graphics, stats

* **Recommended packages**: MASS, lattice, Matrix, nlme, survival, boot, cluster, codetools, foreign, KernSmooth, rpart, spatial, splines, tcltk

* **Contributed packages**: 20,000 + packages contributed by users available on CRAN or Bioconductor (`tidyverse` lives here!) and more on GitHub (like `emo`).


# The big picture

<center>![](figures/data-science-big-picture.png)</center>

## Transform (wrangling) - Week 2 - 3

You shall be able to do this for later assessment! 

```{r echo = TRUE, eval = FALSE}
library(tidyverse)
mtcars |> 
  # create a new variable 
  mutate(kpl = mpg * 0.425144) |> 
  # "select" rows
  filter(vs == 0) |>
  # do things by groups
  group_by(cyl) |>  
  # create a data summarization
  summarize(disp = mean(disp, na.rm = TRUE), 
            kpl = mean(kpl, na.rm = TRUE)) |> 
  # sort the data frame by a variable
  arrange(disp)
```

## Visualization - Week 3 - 4 {.smaller}

You shall be able to do this for later assessment! 

```{r fig.align='center'}
mtcars2 <- mtcars |> 
  mutate(vs = ifelse(vs == 0, "V-shaped", "Straight")) |>
  rename(Engine = vs) 

mtcars2 |> 
  ggplot(aes(x = mpg, y = disp, color = as.factor(cyl))) + 
  geom_point() + 
  facet_wrap(vars(Engine), labeller = label_both) + 
  scale_color_brewer(palette = "Dark2", name = "Number of cylinders") +
  theme_bw() + 
  theme(legend.position = "bottom") + 
  xlab("Miles per gallon") + 
  ylab("Displacement (cu.in.)")
```


## Visualization - week 3 - 4

Visual principles

```{r echo = FALSE}
mtcars_tbl <- rownames_to_column(mtcars, var = "model") |> 
  as_tibble()

p1 <- mtcars_tbl |> 
  ggplot(aes(x = disp, y = model)) + 
  geom_col()

p2 <- mtcars_tbl |>
  mutate(model = fct_reorder(model, disp)) |> 
  ggplot(aes(x = disp, y = model)) + 
  geom_col()

p1 | p2
```



## In next few weeks... {.smaller}


|Week |Date | Content|
|---- |---| ------------------------|  
|Week 2 |09/03| Welcome to tidyverse, tidy data concept |
||09/05| The `dplyr` package: `mutate`, `select`, `filter`, `arrange`, `summarize`|
|Week 3 |09/08| More on `dplyr` verbs: `pull`, `select`, `rename`, `between`, `ifelse`, `case_when`|
||09/10| Visualization with `ggplot2`: geometry + aesthetics|
| |09/12| Visualization with `ggplot2`: geometry + aesthetics|
|Week 4 |09/15| Visualization with `ggplot2`: scale + color + facet + theme|
||09/17| Advanced data wrangling: `dplyr::*_join`, `tidyr::pivot_longer`, and `tidyr::pivot_wider`|
|...||... |

## In next few weeks... {.smaller}


|Week |Date | Content|
|---- |---| ------------------------|  
|Week 5 |09/22| Spatial data: `sf` and `ggplot2::geom_sf()`|
||09/24| Case study: flight data with map|
||09/26| Let's make animation and interactive graphics in R|
|Week 6 |09/29| Case study: flight data - departure and arrival pattern|
||10/01| Webscraping|
| |10/03| Case study: Wikipedia number of annual leave|
|Week 7 |10/06| Wrangling string with `stringr`|
||10/08| Text analysis with `tidytext`|
||10/10| Project #1|
|Week 8 |10/13| Sentiment analysis with `tidytext`|
||10/15| Functional programming |



## Resources {.smaller}

::::{.columms}

 <!-- background-image="figures/books.png" background-size="30%" background-position="50% 80%" -->

:::{.column width="60%"}

-  **R for Data Science** by *Hadley Wickham, Mine Çetinkaya-Rundel, and Garrett Grolemund*:  <https://r4ds.hadley.nz/>
-  **ggplot2: Elegant Graphics for Data Analysis (3e)** by *Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen*: <https://ggplot2-book.org/>
-  **Fundamentals of Data Visualization** by *Claus O. Wilke*: <https://clauswilke.com/dataviz/>
-  **Statistical Computing using R and Python** by *Susan Vanderplas*: <https://srvanderplas.github.io/stat-computing-r-python/>

**We will not learn Python in this course.**

:::

:::{.column width="38%"}
![](figures/books.png)
:::

::::


# R basics

## Gapminder Data {.smaller}

<https://www.youtube.com/watch?v=jbkSRLYSojo&ab_channel=BBC>

![](figures/gapminder.png)


## Gapminder Data

```{r}
# install.packages("gapminder")
library(gapminder)
gapminder
```

## Read documentation 


```{r}
?gapminder
```





::::{.columns .fragment}

:::{.column}
![](figures/gapminder-1.png)
:::


:::{.column .fragment}

<br> 

<br>
<center>We can write some simple code to check the information in the documentation.</center>


:::


::::






## [How many rows and how many columns?]{.r-fit-text}

> The main data frame gapminder has 1704 rows and 6 variables:

```{r}
nrow(gapminder)
ncol(gapminder)
colnames(gapminder)
```

## Did you notice? {.smaller}

[When we print the data, the header already tells you the number of rows and columns]{.r-fit-text}

> #A tibble: 1,704 × 6

```{r}
gapminder
```

## How many continent?

> Continent is a factor with 5 levels

```{r}
unique(gapminder$continent) 
```

## How many countries? 

> Country is a factor with 142 levels

```{r}
unique(gapminder$country) 
```

## How many countries? 

> Country is a factor with 142 levels

```{r}
length(unique(gapminder$country))
```

## What' the range of year reported?

> Year ranges from 1952 to 2007 in increments of 5 years

```{r}
range(gapminder$year)
```

. . .

```{r}
unique(gapminder$year)
diff(unique(gapminder$year))
```


## [What's the min, mean, median, max of lifeExp?]{.r-fit-text}

```{r}
min(gapminder$lifeExp)
mean(gapminder$lifeExp)
median(gapminder$lifeExp)
max(gapminder$lifeExp)
summary(gapminder$lifeExp)
```

## Flight data

```{r echo = FALSE}
options(pillar.width = 80,
        pillar.print_max = 5,
        pillar.print_min = 5)
```

```{r}
library(nycflights13)
flights
```

. . .

We can't see all the variables - we need a better way to see it

## Flight data: `dplyr::glimpse()`

```{r echo = FALSE}
options(pillar.width = 60,
        pillar.print_max = 20,
        pillar.print_min = 20)
```

```{r}
glimpse(flights)
```


## Access the documentation with `?`

```{r}
?dplyr::glimpse
```

<center>![](figures/glimpse.png){width="60%"}</center>


## Look at the first few rows

```{r}
head(flights, n = 3)
```

## The last few rows?

```{r}
tail(flights, n = 3)
```


Check the documentation to see the default `n` value for `head()` and `tail()`.

. . .

![](figures/default-n-tail.png)

## You can also `View()` the data

```{r}
View(flights)
```

<center>![](figures/view.png){width="70%"}</center>


## [What's the average of arrival delay (`arr_delay`)]{.r-fit-text}

```{r}
mean(flights$arr_delay)
```

why?

. . . 

```{r}
tail(flights$arr_delay, n = 10)
is.na(tail(flights$arr_delay, n = 10))
```

. . .

A better way: 

```{r}
mean(flights$arr_delay, na.rm = TRUE)
```

## Lesson learnt {.smaller}

* Practice installing and loading packages with `install.packages("pkg")` and `library(pkg)`.

* Read documentation of a function or a dataset with `?FUN` or `?DATASET`. 

* Check the number of rows, columns, column names with `nrow()`, `ncol()`, `colnames()`.

* Compute summary statistics with `unique()`, `length()`, `range()`, `diff()`, `min()`, `mean()`, `median()`, `max()`, `summary()`. Use the argument `na.rm = TRUE` to accommodate missing values.

* View data with `View()`, `dplyr::glimpse()` and View the first or last few rows with `head()` and `tail()`.

## Your time 

Practice what we've just learn via

```{r eval = FALSE}
usethis::create_from_github("SDS322E-2025FALL/0103-basics")
```

