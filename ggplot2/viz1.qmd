---
title: "Elements of Data Science <br> SDS 322E"
author: "H. Sherry Zhang <br> Department of Statistics and Data Sciences <br> The University of Texas at Austin <br>  <br> Fall 2025"
format: 
  revealjs:
    scrollable: true
    slide-number: true
    show-slide-number: all
    aspectratio: 169
    smaller: true
    theme: serif
    preview-links: auto
    pdf-separate-fragments: true
include-in-header:
  - text: |
      <style>
      .reveal .custom3070 > div.column:first-child {
        width: 30%;
      }
      .reveal .custom3070 div.column:not(:first-child) {
        width: 70%;
      }
      </style>
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center")
library(tidyverse)
library(patchwork)
library(gapminder)
library(nycflights13)
library(flipbookr) # remotes::install_github("kjhealy/flipbookr@quarto")
```

## Why `ggplot2`? 

```{r}
plot(-4:4, -4:4, type = "n")  # setting up coord. system
points(x = rnorm(200), y = rnorm(200), col = "red")
```


## Why `ggplot2`? 

  * `ggplot2` is a package for data visualization based on The Grammars of Graphics
by Leland Wilkinson. 
  
  * Originally written by Hadley Wickham (part of his PhD dissertation), now maintained by posit/RStudio
  
Main references:

  * ggplot2: Elegant Graphics for Data Analysis (3e) by Hadley Wickham, Danielle Navarro, and Thomas Lin Pedersen. <https://ggplot2-book.org/>

  * Data Visualization: A practical introduction by Kieran Healy <https://socviz.co/index.html>
  * Fundamentals of Data Visualization by Claus O. Wilke <https://clauswilke.com/dataviz/index.html>
  
## A layered grammar   

::::{.columns}

:::{.column}

```{r eval = FALSE}
DATA |> 
  ggplot(aes(...)) + 
  geom_xxx() + 
  facet_xxx(...) + 
  coord_xxx(...) + 
  theme_xxx()
```

:::

:::{.column}

![](figures/layered-grammar.png)
:::

::::

## A first example - Lets build!

```{r}
#| label: ggplot-1
#| code-line-numbers: true
#| fig-align: center
ggplot(gapminder, 
       aes(x = lifeExp, 
           y = gdpPercap)) + 
  geom_point()  +
  facet_wrap(vars(continent)) +
  labs(title = "GDP per Capita vs Life Expectancy", 
       x = "GDP per Capita (log scale)", 
       y = "Life Expectancy") + 
  theme_minimal()
```

`r flipbookr:::chunq_reveal("ggplot-1", lcolw = "40", rcolw = "60")`

And we make horrible plots on the way....

## Which geom to use? {.smaller}

I want to see how a continuous variable changes across time, e.g. `lifeExp` across `time`

. . .

```{r}
ggplot(gapminder, aes(x = year, y = lifeExp)) + 
  geom_line()
```

**Bad plot!** Why are lines all linked together?

##  {.smaller}

Why are lines all linked together?

Because we don't tell `geom_line()` to "create each line for each country". `geom_line` by default connects all points in the order they appear in the data.

```{r}
ggplot(gapminder, aes(x = year, y = lifeExp, group = country)) + 
  geom_line()
```

. . .

**Is it good enough?** Now I can see a general increasing trend for most countries, with two drops at around 1977 and 1992. 

. . .

Maybe adding some colors to reveal country/ continent information will help.

## {.smaller}

I want to add some colors to reveal country/ continent information

```{r}
#| fig.height: 6
#| fig.width: 30
ggplot(gapminder, 
       aes(x = year, y = lifeExp, group = country)) + 
  geom_line(aes(color = country))
```

. . .

Ooops... *this is bad (and should be avoided) because* there are too many countries and the color mapping doesn't allow you to read which color corresponds to which country.

Tip: When a categorical variable has too many levels, it is not a good idea to map it to color. 


## {.smaller}

We need to think about how to reduce the number of levels and here we can use `continent`:

```{r}
ggplot(gapminder, 
       aes(x = year, y = lifeExp, group = country)) + 
  geom_line(aes(color = continent))
```

Now we can see Europe and Oceania have higher life expectancy among all countries, while Africa has the lowest, along with some Asian countries.

## {.smaller}

Maybe we want to add a label/ text to the countries with the lowest life expectancy:

```{r}
ggplot(gapminder, 
       aes(x = year, y = lifeExp, group = country)) + 
  geom_line(aes(color = continent))  + 
  # for Rwanda
  geom_label(data = gapminder |> filter(lifeExp == min(lifeExp)), 
             aes(label = country)) + 
  # for Cambodia
  geom_text(data = gapminder |> filter(year == 1977) |> filter(lifeExp == min(lifeExp)),
            aes(label = country))
```

(also `ggrepel::geom_label_repel()` and `ggreple::geom_text_repel()`)

## [Is it a good idea to facet the plot by country?]{.r-fit-text}

```{r}
ggplot(gapminder, 
       aes(x = year, y = lifeExp, group = country)) + 
  geom_line(aes(color = continent))  + 
  facet_wrap(vars(continent))
```

## Facet

Your best friends are `facet_wrap()` for one variable and `facet_grid(y ~ x)` for two variables. But there are other fancy facets (ggplot2 extensions): 
  
::::{.columns}

:::{.column width="45%"}
`ggh4x::facet_nested()` 

![](figures/facet_nested.png)

:::

:::{.column  width="55%"}
`geofacet::facet_geo()`
![](figures/facet_geo.png)
:::

::::
    
